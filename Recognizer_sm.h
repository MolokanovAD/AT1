//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Recognizer.sm
//

#ifndef RECOGNIZER_SM_H
#define RECOGNIZER_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_ReadName;
class Map1_OK;
class Map1_Error;
class Map1_Default;
class RecognizerState;
class RecognizerContext;
class Recognizer;

class RecognizerState :
    public statemap::State
{
public:

    RecognizerState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(RecognizerContext&) {};
    virtual void Exit(RecognizerContext&) {};

    virtual void Colon(RecognizerContext& context);
    virtual void Digit(RecognizerContext& context, char D);
    virtual void EOS(RecognizerContext& context);
    virtual void Letter(RecognizerContext& context, char L);
    virtual void Space(RecognizerContext& context);
    virtual void Unknown(RecognizerContext& context);

protected:

    virtual void Default(RecognizerContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_ReadName ReadName;
    static Map1_OK OK;
    static Map1_Error Error;
};

class Map1_Default :
    public RecognizerState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : RecognizerState(name, stateId)
    {};

};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Colon(RecognizerContext& context);
    virtual void Digit(RecognizerContext& context, char D);
    virtual void EOS(RecognizerContext& context);
    virtual void Letter(RecognizerContext& context, char L);
    virtual void Space(RecognizerContext& context);
    virtual void Unknown(RecognizerContext& context);
};

class Map1_ReadName :
    public Map1_Default
{
public:
    Map1_ReadName(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Colon(RecognizerContext& context);
    virtual void Digit(RecognizerContext& context, char D);
    virtual void EOS(RecognizerContext& context);
    virtual void Letter(RecognizerContext& context, char L);
    virtual void Space(RecognizerContext& context);
    virtual void Unknown(RecognizerContext& context);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class Map1_Error :
    public Map1_Default
{
public:
    Map1_Error(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Colon(RecognizerContext& context);
    virtual void Digit(RecognizerContext& context, char D);
    virtual void EOS(RecognizerContext& context);
    virtual void Letter(RecognizerContext& context, char L);
    virtual void Space(RecognizerContext& context);
    virtual void Unknown(RecognizerContext& context);
};

class RecognizerContext :
    public statemap::FSMContext
{
public:

    explicit RecognizerContext(Recognizer& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    RecognizerContext(Recognizer& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline Recognizer& getOwner()
    {
        return (_owner);
    };

    inline RecognizerState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<RecognizerState&>(*_state);
    };

    inline void Colon()
    {
        getState().Colon(*this);
    };

    inline void Digit(char D)
    {
        getState().Digit(*this, D);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void Letter(char L)
    {
        getState().Letter(*this, L);
    };

    inline void Space()
    {
        getState().Space(*this);
    };

    inline void Unknown()
    {
        getState().Unknown(*this);
    };

private:
    Recognizer& _owner;
};


#endif // RECOGNIZER_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
