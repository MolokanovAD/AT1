//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Recognizer.sm
//

#include "Recognizer.h"
#include ".\Recognizer_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_ReadName Map1::ReadName("Map1::ReadName", 1);
Map1_OK Map1::OK("Map1::OK", 2);
Map1_Error Map1::Error("Map1::Error", 3);

void RecognizerState::Colon(RecognizerContext& context)
{
    Default(context);
}

void RecognizerState::Digit(RecognizerContext& context, char D)
{
    Default(context);
}

void RecognizerState::EOS(RecognizerContext& context)
{
    Default(context);
}

void RecognizerState::Letter(RecognizerContext& context, char L)
{
    Default(context);
}

void RecognizerState::Space(RecognizerContext& context)
{
    Default(context);
}

void RecognizerState::Unknown(RecognizerContext& context)
{
    Default(context);
}

void RecognizerState::Default(RecognizerContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Default::Space(RecognizerContext& context)
{


}

void Map1_Default::Letter(RecognizerContext& context, char L)
{


}

void Map1_Default::Digit(RecognizerContext& context, char D)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Colon(RecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Unknown(RecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::EOS(RecognizerContext& context)
{
    Recognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::EOS(RecognizerContext& context)
{
    Recognizer& ctxt = context.getOwner();

    if (!ctxt.checkEqual())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::OK);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::EOS(context);
    }

}

void Map1_Start::Letter(RecognizerContext& context, char L)
{
    Recognizer& ctxt = context.getOwner();

    if (ctxt.isNameRead() )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.createGoal();
            ctxt.writeReqGoal(L);
            context.setState(Map1::ReadName);
        }
        catch (...)
        {
            context.setState(Map1::ReadName);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.writeMainGoal(L);
            context.setState(Map1::ReadName);
        }
        catch (...)
        {
            context.setState(Map1::ReadName);
            throw;
        }
        context.getState().Entry(context);
    }

}

void Map1_ReadName::Colon(RecognizerContext& context)
{
    Recognizer& ctxt = context.getOwner();

    if (ctxt.isNameRead() )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Error);
        context.getState().Entry(context);
    }
    else
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.nameRead();
            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }

}

void Map1_ReadName::Digit(RecognizerContext& context, char D)
{
    Recognizer& ctxt = context.getOwner();

    if (ctxt.isNameRead())
    {
        RecognizerState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.writeReqGoal(D);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
        RecognizerState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.writeMainGoal(D);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }

}

void Map1_ReadName::EOS(RecognizerContext& context)
{
    Recognizer& ctxt = context.getOwner();

    if (!ctxt.checkEqual())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::OK);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::EOS(context);
    }

}

void Map1_ReadName::Letter(RecognizerContext& context, char L)
{
    Recognizer& ctxt = context.getOwner();

    if (ctxt.isNameRead())
    {
        RecognizerState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.writeReqGoal(L);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
        RecognizerState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.writeMainGoal(L);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }

}

void Map1_ReadName::Space(RecognizerContext& context)
{
    Recognizer& ctxt = context.getOwner();

    if (ctxt.isNameRead() && !ctxt.checkEqual())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Start);
        context.getState().Entry(context);
    }
    else
    {
        context.getState().Exit(context);
        context.setState(Map1::Error);
        context.getState().Entry(context);
    }

}

void Map1_ReadName::Unknown(RecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
